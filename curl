curl -d '{
  "solidity": "// SPDX-License-Identifier: MIT \n pragma solidity ^0.8.3; \n contract ERC20Basic { \n string public constant name = \"ERC20Basic\"; \n string public constant symbol = \"BSC\"; \n uint8 public constant decimals = 18; \n event Approval(address indexed tokenOwner, address indexed spender, uint tokens); \n event Transfer(address indexed from, address indexed to, uint tokens); \n mapping(address => uint256) balances; \n mapping(address => mapping (address => uint256)) allowed; \n uint256 totalSupply_; \n using SafeMath for uint256; \n constructor(uint256 total) public { \n totalSupply_ = total; \n balances[msg.sender] = totalSupply_;} \n function totalSupply() public view returns (uint256) { \n return totalSupply_;} \n function balanceOf(address tokenOwner) public view returns (uint) { \n return balances[tokenOwner];} \n function transfer(address receiver, uint numTokens) public returns (bool) { \n require(numTokens <= balances[msg.sender]); \n balances[msg.sender] = balances[msg.sender].sub(numTokens); \n balances[receiver] = balances[receiver].add(numTokens); \n emit Transfer(msg.sender, receiver, numTokens); \n return true;} \n function approve(address delegate, uint numTokens) public returns (bool) { \n allowed[msg.sender][delegate] = numTokens; \n emit Approval(msg.sender, delegate, numTokens); \n return true;} \n function allowance(address owner, address delegate) public view returns (uint) { \n return allowed[owner][delegate];} \n function transferFrom(address owner, address buyer, uint numTokens) public returns (bool) { \n require(numTokens <= balances[owner]); \n require(numTokens <= allowed[owner][msg.sender]); \n balances[owner] = balances[owner].sub(numTokens); \n allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens); \n balances[buyer] = balances[buyer].add(numTokens); \n emit Transfer(owner, buyer, numTokens); \n return true;}} \n library SafeMath {  \n function sub(uint256 a, uint256 b) internal pure returns (uint256) { \n assert(b <= a); \n return a - b;} \n function add(uint256 a, uint256 b) internal pure returns (uint256) { \n uint256 c = a + b; \n assert(c >= a); \n return c;}}",
  "params": [10000000000000000000000000000000],
  "publish": ["ERC20Basic"],
  "private": "1b4f0e9851971998e732078544c96b36c3d01cedf7caa332359d6f1d83567014",
  "gas_limit": 500000
}' https://api.blockcypher.com/v1/beth/test/contracts?token=da723bfd7ccd4d868d7a29f32d1e342a

curl -s https://api.blockcypher.com/v1/eth/main/contracts/a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48?token=da723bfd7ccd4d868d7a29f32d1e342a
curl -s https://api.blockcypher.com/v1/beth/test/contracts/31f75c38ce20ad15b26163e9e8fb521008df0f5a?token=da723bfd7ccd4d868d7a29f32d1e342a
